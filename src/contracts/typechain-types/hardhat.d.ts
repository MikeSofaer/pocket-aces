/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Deck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deck__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "PokerHandEvaluator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PokerHandEvaluator__factory>;
    getContractFactory(
      name: "TexasHoldem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TexasHoldem__factory>;
    getContractFactory(
      name: "TestPokerHandEvaluator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPokerHandEvaluator__factory>;

    getContractAt(
      name: "Deck",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deck>;
    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "PokerHandEvaluator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PokerHandEvaluator>;
    getContractAt(
      name: "TexasHoldem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TexasHoldem>;
    getContractAt(
      name: "TestPokerHandEvaluator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPokerHandEvaluator>;

    deployContract(
      name: "Deck",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deck>;
    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "PokerHandEvaluator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PokerHandEvaluator>;
    deployContract(
      name: "TexasHoldem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TexasHoldem>;
    deployContract(
      name: "TestPokerHandEvaluator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPokerHandEvaluator>;

    deployContract(
      name: "Deck",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deck>;
    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "PokerHandEvaluator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PokerHandEvaluator>;
    deployContract(
      name: "TexasHoldem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TexasHoldem>;
    deployContract(
      name: "TestPokerHandEvaluator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPokerHandEvaluator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
