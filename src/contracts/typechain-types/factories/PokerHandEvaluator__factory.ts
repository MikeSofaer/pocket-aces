/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  PokerHandEvaluator,
  PokerHandEvaluatorInterface,
} from "../PokerHandEvaluator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "ranks",
        type: "uint8[5]",
      },
    ],
    name: "countRanks",
    outputs: [
      {
        internalType: "uint8[13]",
        name: "",
        type: "uint8[13]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "cards",
        type: "uint8[5]",
      },
    ],
    name: "evaluateHand",
    outputs: [
      {
        components: [
          {
            internalType: "enum PokerHandEvaluator.HandRank",
            name: "rank",
            type: "PokerHandEvaluator.HandRank",
          },
          {
            internalType: "uint8",
            name: "highestCard",
            type: "uint8",
          },
        ],
        internalType: "struct PokerHandEvaluator.Hand",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[7]",
        name: "fullHand",
        type: "uint8[7]",
      },
    ],
    name: "findBestFiveCardHand",
    outputs: [
      {
        internalType: "uint8[5]",
        name: "bestHand",
        type: "uint8[5]",
      },
      {
        internalType: "enum PokerHandEvaluator.HandRank",
        name: "rank",
        type: "PokerHandEvaluator.HandRank",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "ranks",
        type: "uint8[5]",
      },
    ],
    name: "findStraight",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "suits",
        type: "uint8[5]",
      },
    ],
    name: "isFlush",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "ranks",
        type: "uint8[5]",
      },
    ],
    name: "isRoyalStraight",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[5]",
        name: "ranks",
        type: "uint8[5]",
      },
    ],
    name: "sortRanks",
    outputs: [
      {
        internalType: "uint8[5]",
        name: "",
        type: "uint8[5]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611795610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063b19654ca11610065578063b19654ca1461011d578063cc49a3811461014d578063de6cd1611461017d578063fc04c4e5146101ad57610087565b80630a6850331461008c5780632a73f714146100bd57806382e58f9e146100ed575b600080fd5b6100a660048036038101906100a1919061112e565b6101dd565b6040516100b492919061127d565b60405180910390f35b6100d760048036038101906100d29190611357565b61039e565b6040516100e4919061139f565b60405180910390f35b61010760048036038101906101029190611357565b6104f3565b60405161011491906113f8565b60405180910390f35b61013760048036038101906101329190611357565b610bcf565b6040516101449190611413565b60405180910390f35b61016760048036038101906101629190611357565b610ceb565b60405161017491906114b2565b60405180910390f35b61019760048036038101906101929190611357565b610df2565b6040516101a4919061139f565b60405180910390f35b6101c760048036038101906101c29190611357565b610e67565b6040516101d4919061139f565b60405180910390f35b6101e5610f2b565b60008060405180604001604052806000600981111561020757610206611206565b5b8152602001600060ff16815250905060005b60078160ff16101561039757600060018261023491906114fd565b90505b60078160ff1610156103895761024b610f2b565b6000805b60078160ff1610156102da578460ff168160ff161415801561027757508360ff168160ff1614155b156102cd57888160ff166007811061029257610291611532565b5b6020020151838360ff16600581106102ad576102ac611532565b5b602002019060ff16908160ff168152505081806102c990611561565b9250505b808060010191505061024f565b5060006102e6836104f3565b9050856000015160098111156102ff576102fe611206565b5b8160000151600981111561031657610315611206565b5b111561032757809550829750610379565b8560000151600981111561033e5761033d611206565b5b8160000151600981111561035557610354611206565b5b0361037857856020015160ff16816020015160ff161115610377578095508297505b5b5b5050508080600101915050610237565b508080600101915050610219565b5050915091565b6000600e826000600581106103b6576103b5611532565b5b602002015160ff161480156103e657506005826001600581106103dc576103db611532565b5b602002015160ff16145b801561040d575060048260026005811061040357610402611532565b5b602002015160ff16145b8015610434575060038260036005811061042a57610429611532565b5b602002015160ff16145b801561045b575060028260046005811061045157610450611532565b5b602002015160ff16145b1561046957600190506104ee565b60005b60048160ff1610156104e85760018360018361048891906114fd565b60ff166005811061049c5761049b611532565b5b60200201516104ab91906114fd565b60ff16838260ff16600581106104c4576104c3611532565b5b602002015160ff16146104db5760009150506104ee565b808060010191505061046c565b50600190505b919050565b6104fb610f4d565b610503610f2b565b61050b610f2b565b60005b60058160ff161015610636576001600d6001878460ff166005811061053657610535611532565b5b6020020151610545919061158a565b61054f91906115ee565b61055991906114fd565b838260ff166005811061056f5761056e611532565b5b602002019060ff16908160ff1681525050600d6001868360ff166005811061059a57610599611532565b5b60200201516105a9919061158a565b6105b3919061161f565b828260ff16600581106105c9576105c8611532565b5b602002019060ff16908160ff16815250506001838260ff16600581106105f2576105f1611532565b5b602002015160ff160361062957600e838260ff166005811061061757610616611532565b5b602002019060ff16908160ff16815250505b808060010191505061050e565b5061064082610bcf565b9150600061064d83610ceb565b905060008060008061065e86610df2565b9050600061066b8861039e565b9050600061067889610e67565b90508280156106845750805b156106db5760405180604001604052806009808111156106a7576106a6611206565b5b81526020018a6000600581106106c0576106bf611532565b5b602002015160ff168152509950505050505050505050610bca565b8280156106e55750815b1561073d5760405180604001604052806008600981111561070957610708611206565b5b81526020018a60006005811061072257610721611532565b5b602002015160ff168152509950505050505050505050610bca565b60005b600d8160ff1610156107c6576004888260ff16600d811061076457610763611532565b5b602002015160ff16036107b9576040518060400160405280600760098111156107905761078f611206565b5b81526020016001836107a291906114fd565b60ff168152509a5050505050505050505050610bca565b8080600101915050610740565b5060005b600d8160ff161015610872576003888260ff16600d81106107ee576107ed611532565b5b602002015160ff160361080f5760018161080891906114fd565b9450610865565b6002888260ff16600d811061082757610826611532565b5b602002015160ff16036108645760008760ff16036108535760018161084c91906114fd565b9650610863565b60018161086091906114fd565b95505b5b5b80806001019150506107ca565b5060008460ff16118015610889575060008660ff16115b8015610898575060008560ff16145b156108d8576040518060400160405280600660098111156108bc576108bb611206565b5b81526020018560ff168152509950505050505050505050610bca565b8115610931576040518060400160405280600460098111156108fd576108fc611206565b5b81526020018a60006005811061091657610915611532565b5b602002015160ff168152509950505050505050505050610bca565b821561098a5760405180604001604052806005600981111561095657610955611206565b5b81526020018a60006005811061096f5761096e611532565b5b602002015160ff168152509950505050505050505050610bca565b60008460ff1611156109d1576040518060400160405280600360098111156109b5576109b4611206565b5b81526020018560ff168152509950505050505050505050610bca565b60008660ff161180156109e7575060008560ff16115b15610a83578460ff168660ff1603610a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2b906116ad565b60405180910390fd5b604051806040016040528060026009811115610a5357610a52611206565b5b81526020018660ff168860ff1611610a6b5786610a6d565b875b60ff168152509950505050505050505050610bca565b60008660ff161115610aca57604051806040016040528060016009811115610aae57610aad611206565b5b81526020018760ff168152509950505050505050505050610bca565b60008660ff16118015610ae0575060008560ff16115b15610b3457604051806040016040528060026009811115610b0457610b03611206565b5b81526020018660ff168860ff1611610b1c5786610b1e565b875b60ff168152509950505050505050505050610bca565b60008660ff161115610b7b57604051806040016040528060016009811115610b5f57610b5e611206565b5b81526020018760ff168152509950505050505050505050610bca565b604051806040016040528060006009811115610b9a57610b99611206565b5b81526020018a600060058110610bb357610bb2611532565b5b602002015160ff1681525099505050505050505050505b919050565b610bd7610f2b565b60005b60048160ff161015610ce2576000600182610bf591906114fd565b90505b60058160ff161015610cd457838160ff1660058110610c1a57610c19611532565b5b602002015160ff16848360ff1660058110610c3857610c37611532565b5b602002015160ff161015610cc757838160ff1660058110610c5c57610c5b611532565b5b6020020151848360ff1660058110610c7757610c76611532565b5b6020020151858460ff1660058110610c9257610c91611532565b5b60200201868460ff1660058110610cac57610cab611532565b5b602002018260ff1660ff168152508260ff1660ff1681525050505b8080600101915050610bf8565b508080600101915050610bda565b50819050919050565b610cf3610f7c565b610cfb610f7c565b60005b60058160ff161015610de8576000600e858360ff1660058110610d2457610d23611532565b5b602002015160ff1614610d5d576001858360ff1660058110610d4957610d48611532565b5b6020020151610d58919061158a565b610d60565b60005b9050600d8160ff1610610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f9061173f565b60405180910390fd5b828160ff16600d8110610dbe57610dbd611532565b5b602002018051809190610dd090611561565b60ff1660ff1681525050508080600101915050610cfe565b5080915050919050565b600080600190505b60058160ff161015610e5c5782600060058110610e1a57610e19611532565b5b602002015160ff16838260ff1660058110610e3857610e37611532565b5b602002015160ff1614610e4f576000915050610e62565b8080600101915050610dfa565b50600190505b919050565b6000600e82600060058110610e7f57610e7e611532565b5b602002015160ff16148015610eaf5750600d82600160058110610ea557610ea4611532565b5b602002015160ff16145b8015610ed65750600c82600260058110610ecc57610ecb611532565b5b602002015160ff16145b8015610efd5750600b82600360058110610ef357610ef2611532565b5b602002015160ff16145b8015610f245750600a82600460058110610f1a57610f19611532565b5b602002015160ff16145b9050919050565b6040518060a00160405280600590602082028036833780820191505090505090565b604051806040016040528060006009811115610f6c57610f6b611206565b5b8152602001600060ff1681525090565b604051806101a00160405280600d90602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ffc82610fb3565b810181811067ffffffffffffffff8211171561101b5761101a610fc4565b5b80604052505050565b600061102e610f9f565b905061103a8282610ff3565b919050565b600067ffffffffffffffff82111561105a57611059610fc4565b5b602082029050919050565b600080fd5b600060ff82169050919050565b6110808161106a565b811461108b57600080fd5b50565b60008135905061109d81611077565b92915050565b60006110b66110b18461103f565b611024565b905080602084028301858111156110d0576110cf611065565b5b835b818110156110f957806110e5888261108e565b8452602084019350506020810190506110d2565b5050509392505050565b600082601f83011261111857611117610fae565b5b60076111258482856110a3565b91505092915050565b600060e0828403121561114457611143610fa9565b5b600061115284828501611103565b91505092915050565b600060059050919050565b600081905092915050565b6000819050919050565b6111848161106a565b82525050565b6000611196838361117b565b60208301905092915050565b6000602082019050919050565b6111b88161115b565b6111c28184611166565b92506111cd82611171565b8060005b838110156111fe5781516111e5878261118a565b96506111f0836111a2565b9250506001810190506111d1565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a811061124657611245611206565b5b50565b600081905061125782611235565b919050565b600061126782611249565b9050919050565b6112778161125c565b82525050565b600060c08201905061129260008301856111af565b61129f60a083018461126e565b9392505050565b600067ffffffffffffffff8211156112c1576112c0610fc4565b5b602082029050919050565b60006112df6112da846112a6565b611024565b905080602084028301858111156112f9576112f8611065565b5b835b81811015611322578061130e888261108e565b8452602084019350506020810190506112fb565b5050509392505050565b600082601f83011261134157611340610fae565b5b600561134e8482856112cc565b91505092915050565b600060a0828403121561136d5761136c610fa9565b5b600061137b8482850161132c565b91505092915050565b60008115159050919050565b61139981611384565b82525050565b60006020820190506113b46000830184611390565b92915050565b6113c38161125c565b82525050565b6040820160008201516113df60008501826113ba565b5060208201516113f2602085018261117b565b50505050565b600060408201905061140d60008301846113c9565b92915050565b600060a08201905061142860008301846111af565b92915050565b6000600d9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6114648161142e565b61146e8184611439565b925061147982611444565b8060005b838110156114aa578151611491878261118a565b965061149c8361144e565b92505060018101905061147d565b505050505050565b60006101a0820190506114c8600083018461145b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115088261106a565b91506115138361106a565b9250828201905060ff81111561152c5761152b6114ce565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061156c8261106a565b915060ff820361157f5761157e6114ce565b5b600182019050919050565b60006115958261106a565b91506115a08361106a565b9250828203905060ff8111156115b9576115b86114ce565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115f98261106a565b91506116048361106a565b925082611614576116136115bf565b5b828206905092915050565b600061162a8261106a565b91506116358361106a565b925082611645576116446115bf565b5b828204905092915050565b600082825260208201905092915050565b7f4572726f723a204475706c696361746520706169727320646574656374656421600082015250565b6000611697602083611650565b91506116a282611661565b602082019050919050565b600060208201905081810360008301526116c68161168a565b9050919050565b7f636f756e7452616e6b733a2052616e6b20696e646578206f7574206f6620626f60008201527f756e647300000000000000000000000000000000000000000000000000000000602082015250565b6000611729602483611650565b9150611734826116cd565b604082019050919050565b600060208201905081810360008301526117588161171c565b905091905056fea2646970667358221220d942e20b27fa39a606f5f8407c5efb387b25c55617a3ef0da57eee1ead3ad4bd64736f6c63430008180033";

type PokerHandEvaluatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PokerHandEvaluatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PokerHandEvaluator__factory extends ContractFactory {
  constructor(...args: PokerHandEvaluatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PokerHandEvaluator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PokerHandEvaluator__factory {
    return super.connect(runner) as PokerHandEvaluator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PokerHandEvaluatorInterface {
    return new Interface(_abi) as PokerHandEvaluatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PokerHandEvaluator {
    return new Contract(address, _abi, runner) as unknown as PokerHandEvaluator;
  }
}
