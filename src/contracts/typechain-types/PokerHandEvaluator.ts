/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PokerHandEvaluator {
  export type HandStruct = { rank: BigNumberish; highestCard: BigNumberish };

  export type HandStructOutput = [rank: bigint, highestCard: bigint] & {
    rank: bigint;
    highestCard: bigint;
  };
}

export interface PokerHandEvaluatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "countRanks"
      | "evaluateHand"
      | "findBestFiveCardHand"
      | "findStraight"
      | "isFlush"
      | "isRoyalStraight"
      | "sortRanks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "countRanks",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateHand",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestFiveCardHand",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findStraight",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlush",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoyalStraight",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortRanks",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "countRanks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaluateHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestFiveCardHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findStraight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFlush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRoyalStraight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortRanks", data: BytesLike): Result;
}

export interface PokerHandEvaluator extends BaseContract {
  connect(runner?: ContractRunner | null): PokerHandEvaluator;
  waitForDeployment(): Promise<this>;

  interface: PokerHandEvaluatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  countRanks: TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint[]],
    "view"
  >;

  evaluateHand: TypedContractMethod<
    [
      cards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [PokerHandEvaluator.HandStructOutput],
    "view"
  >;

  findBestFiveCardHand: TypedContractMethod<
    [fullHand: BigNumberish[]],
    [
      [[bigint, bigint, bigint, bigint, bigint], bigint] & {
        bestHand: [bigint, bigint, bigint, bigint, bigint];
        rank: bigint;
      }
    ],
    "view"
  >;

  findStraight: TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;

  isFlush: TypedContractMethod<
    [
      suits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;

  isRoyalStraight: TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;

  sortRanks: TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "countRanks"
  ): TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "evaluateHand"
  ): TypedContractMethod<
    [
      cards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [PokerHandEvaluator.HandStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "findBestFiveCardHand"
  ): TypedContractMethod<
    [fullHand: BigNumberish[]],
    [
      [[bigint, bigint, bigint, bigint, bigint], bigint] & {
        bestHand: [bigint, bigint, bigint, bigint, bigint];
        rank: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "findStraight"
  ): TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFlush"
  ): TypedContractMethod<
    [
      suits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRoyalStraight"
  ): TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "sortRanks"
  ): TypedContractMethod<
    [
      ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  filters: {};
}
